# Disables IPv6 probing and adds an option to change the IPv6 probing result
# TODO: Consider adding a chrome://flag to set the command-line flag

--- a/net/base/features.cc
+++ b/net/base/features.cc
@@ -178,5 +178,7 @@ extern const base::FeatureParam<int> kLi
     "LimitOpenUDPSocketsMax",
     6000);
 
+const base::Feature kSetIpv6ProbeFalse{"SetIpv6ProbeFalse", base::FEATURE_DISABLED_BY_DEFAULT};
+
 }  // namespace features
 }  // namespace net
--- a/net/base/features.h
+++ b/net/base/features.h
@@ -266,6 +266,8 @@ NET_EXPORT extern const base::Feature kL
 // this will result in a failure (ERR_INSUFFICIENT_RESOURCES).
 NET_EXPORT extern const base::FeatureParam<int> kLimitOpenUDPSocketsMax;
 
+NET_EXPORT extern const base::Feature kSetIpv6ProbeFalse;
+
 }  // namespace features
 }  // namespace net
 
--- a/net/dns/host_resolver_manager.cc
+++ b/net/dns/host_resolver_manager.cc
@@ -131,11 +131,6 @@ const unsigned kMinimumTTLSeconds = kCac
 // cached.
 const int kIPv6ProbePeriodMs = 1000;
 
-// RIPE NCC k.root-servers.net. 2001:7fd::1 (anycasted), used for IPv6 probes.
-const uint8_t kIPv6ProbeAddress[] = {0x20, 0x01, 0x07, 0xfd, 0x00, 0x00,
-                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-                                     0x00, 0x00, 0x00, 0x01};
-
 enum DnsResolveStatus {
   RESOLVE_STATUS_DNS_SUCCESS = 0,
   RESOLVE_STATUS_PROC_SUCCESS,
@@ -3584,7 +3579,7 @@ bool HostResolverManager::IsIPv6Reachabl
       (tick_clock_->NowTicks() - last_ipv6_probe_time_).InMilliseconds() >
           kIPv6ProbePeriodMs) {
     SetLastIPv6ProbeResult(
-        IsGloballyReachable(IPAddress(kIPv6ProbeAddress), net_log));
+        !base::FeatureList::IsEnabled(features::kSetIpv6ProbeFalse));
     cached = false;
   }
   net_log.AddEvent(
