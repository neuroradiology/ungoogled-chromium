# Add --enable-stacked-tab-strip and --enable-tab-adjust-layout flags to tweak tab strip behavior

--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -2227,6 +2227,10 @@ const FeatureEntry kFeatureEntries[] = {
 // Include generated flags for flag unexpiry; see //docs/flag_expiry.md and
 // //tools/flags/generate_unexpire_flags.py.
 #include "chrome/browser/unexpire_flags_gen.inc"
+    {"enable-stacked-tab-strip",
+     "Enable stacking in the tab strip",
+     "Forces tabs to be stacked in the tab strip. Otherwise, they follow default behavior.",
+     kOsAll, SINGLE_VALUE_TYPE("enable-stacked-tab-strip")},
     {"ignore-gpu-blocklist", flag_descriptions::kIgnoreGpuBlocklistName,
      flag_descriptions::kIgnoreGpuBlocklistDescription, kOsAll,
      SINGLE_VALUE_TYPE(switches::kIgnoreGpuBlocklist)},
--- a/chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
+++ b/chrome/browser/ui/views/tabs/browser_tab_strip_controller.cc
@@ -72,14 +72,13 @@ using content::WebContents;
 namespace {
 
 bool DetermineTabStripLayoutStacked(PrefService* prefs, bool* adjust_layout) {
-  *adjust_layout = false;
-  // For ash, always allow entering stacked mode.
 #if defined(OS_CHROMEOS)
   *adjust_layout = true;
   return prefs->GetBoolean(prefs::kTabStripStackedLayout);
 #else
-  return base::CommandLine::ForCurrentProcess()->HasSwitch(
-      switches::kForceStackedTabStripLayout);
+  *adjust_layout = base::CommandLine::ForCurrentProcess()->HasSwitch("enable-tab-adjust-layout");
+  return prefs->GetBoolean(prefs::kTabStripStackedLayout) ||
+      base::CommandLine::ForCurrentProcess()->HasSwitch("enable-stacked-tab-strip");
 #endif
 }
 
